clc;
clear;
close all;  
%%
%   Fuzzy C-means clustering algorithm Implementation
%   #of cluster 3
%   Data set : Demo data generated by Professor 
%   Output: Clustered data points using Fuzzy logic 

%% Load dataset 
load("clusterdata.mat");
[datapoints, ~] = size(clusterdemo); % size determination of dataset
%% Initialization 

cluster = 3; % # of Clusters
m = 2; %the fuzzifier must be >1 , ideally set to 2

epsilon = 1e-5; %  the convergence threshold

% step 1: pick random cluster centre points 
V = rand(3); %the cluster centers 
V_new = V; % tmo new cluster centers 


t = 0; %iteration intialization 
u = zeros(600,3); %membership array 
stopping_criteia  = 0.1; % difference 

    %plot dataset 

figure;
hold on;
scatter3(clusterdemo(:,1),clusterdemo(:,2),clusterdemo(:,3),'blue','.');


% stwp 2: run the loop until convergence  
while stopping_criteia > epsilon % congergence criteria 
    
%     %print the central points for each iteration
%     scatter3(Vnew(1,1),Vnew(1,2),Vnew(1,3),'black','o');
%     scatter3(Vnew(2,1),Vnew(2,2),Vnew(2,3),'green','o');
%     scatter3(Vnew(3,1),Vnew(3,2),Vnew(3,3),'blue','o');
   
    
    V = V_new;
    
    %step 3: compute the memberships uik for each data point
    for k = 1:datapoints
        
        for j = 1:cluster
            d = norm((clusterdemo(k,:)-V(j,:))); % Norm is a built in matlab function to get  Euclidean distance 
            u(k,j) =d;
        end
       
        %Calculate for each points in cluster 
        u(k,:) = 1./u(k,:);
        u(k,:) = (u(k,:)).^2;

        d_total = sum(u(k,:));% Total distance
        
        % membership for each cluster 
        u(k,:) = u(k,:)/d_total;
          
    end 
    
    % step 4: calculate new cluster centre points 
    
    for i = 1:cluster  
        x_dis = 0;
        y_dis = 0;
            
        for k = 1:datapoints
            x_dis = u(k,i)^2 + x_dis; % x axis offset 
            y_dis = (u(k,i)^2).*clusterdemo(k,:)+y_dis;  % y-axis offset   
            
            
        end
            
            V_new(i,:) = y_dis/x_dis;% required distance to shift 
       
    end
    
    t = t + 1; % increase iteration 
    stopping_criteia = 0;
    
    
    % determine stopping criteria 
    for j = 1:cluster
        d = norm((V_new(j,:)-V(j,:)));
        stopping_criteia = d + stopping_criteia;
    end
   
end
%%  Final output plot   
disp("Total number of iteration :" + t);
% PLot final output 
scatter3(V_new(1,1),V_new(1,2),V_new(1,3),30,'black','d');
scatter3(V_new(2,1),V_new(2,2),V_new(2,3),30,'red','d');
scatter3(V_new(3,1),V_new(3,2),V_new(3,3),30,'magenta','d');
title('Fuzzy C means clustering')
xlabel('X');
ylabel('Y');
hold off;

    

